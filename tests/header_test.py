"""
Test: header removal
"""
import unittest
import ediclean.paxlst as paxlst


class TestEdifact(unittest.TestCase):
    def test_header(self):
        bad_header = (
            "CICA  "
            ""
            ".DIRTADV 033118"
            "UNA:+.? 'UNB+UNOA:4+CICA-DV:DV+ABCAPIS:ZZ+210709:1419+2107091419"
            "++APIS'UNG+PAXLST+CICA-DV:ZZ+ABCAPIS:ZZ+210709:1419+1+UN+D:05B'U"
            "NH+PAX001+PAXLST:D:05B:UN:IATA+AT1234/210710/0140+02:F'BGM+745'N"
            "AD+MS+++CICA HELP DESK'COM+43 1 26060 420:TE+43 1 26060:FX'TDT+2"
            "0+AT1234'LOC+125+GYD'DTM+189:2107092100:201'LOC+87+NQZ'DTM+232:2"
            "107100140:201'NAD+FL+++HANS:WALZERWURSTD'ATT+2++M'DTM+329:910907"
            "'MEA+CT++:0'FTX+BAG+++NULL'LOC+22+GYD'LOC+178+GYD'LOC+179+NQZ'NA"
            "T+2+AUT'RFF+AVF:AT123'RFF+SEA:9A'DOC+P:110:111+08358725'DTM+36:2"
            "21022'LOC+91+AUT'NAD+FL+++STEFANER:GROSSR'ATT+2++M'DTM+329:91042"
            "4'MEA+CT++:0'FTX+BAG+++NULL'LOC+22+GYD'LOC+178+GYD'LOC+179+NQZ'N"
            "AT+2+AUT'RFF+AVF:AT123'RFF+SEA:9C'DOC+P:110:111+09456160'DTM+36:"
            "240710'LOC+91+AUT'NAD+FL+++ESWERFA:EDWTVJD'ATT+2++M'DTM+329:7010"
            "05'MEA+CT++:0'FTX+BAG+++NULL'LOC+22+GYD'LOC+178+GYD'LOC+179+NQZ'"
            "NAT+2+AUT'RFF+AVF:AT122'RFF+SEA:9D'DOC+P:110:111+08031079'DTM+36"
            ":220503'LOC+91+AUT'NAD+FL+++UREKS:ADERRFMJRU'ATT+2++M'DTM+329:75"
            "0513'MEA+CT++:0'FTX+BAG+++NULL'LOC+22+GYD'LOC+178+GYD'LOC+179+NQ"
            "Z'NAT+2+AUT'RFF+AVF:NJ0SC'RFF+SEA:9F'DOC+P:110:111+07796143'DTM+"
            "36:220105'LOC+91+AUT'CNT+42:14'UNT+67+PAX001'UNE+1+1'UNZ+1+21070"
            "91419'")

        good_header = (
            "UNA:+.? '\n"
            "UNB+UNOA:4+CICA-DV:DV+ABCAPIS:ZZ+210709:1419+2107091419++APIS'\n"
            "UNG+PAXLST+CICA-DV:ZZ+ABCAPIS:ZZ+210709:1419+1+UN+D:05B'\n"
            "UNH+PAX001+PAXLST:D:05B:UN:IATA+AT1234/210710/0140+02:F'\n"
            "BGM+745'\n"
            "NAD+MS+++CICA HELP DESK'\n"
            "COM+43 1 26060 420:TE+43 1 26060:FX'\n"
            "TDT+20+AT1234'\n"
            "LOC+125+GYD'\n"
            "DTM+189:2107092100:201'\n"
            "LOC+87+NQZ'\n"
            "DTM+232:2107100140:201'\n"
            "NAD+FL+++HANS:WALZERWURSTD'\n"
            "ATT+2++M'\n"
            "DTM+329:910907'\n"
            "MEA+CT++:0'\n"
            "FTX+BAG+++NULL'\n"
            "LOC+22+GYD'\n"
            "LOC+178+GYD'\n"
            "LOC+179+NQZ'\n"
            "NAT+2+AUT'\n"
            "RFF+AVF:AT123'\n"
            "RFF+SEA:9A'\n"
            "DOC+P:110:111+08358725'\n"
            "DTM+36:221022'\n"
            "LOC+91+AUT'\n"
            "NAD+FL+++STEFANER:GROSSR'\n"
            "ATT+2++M'\n"
            "DTM+329:910424'\n"
            "MEA+CT++:0'\n"
            "FTX+BAG+++NULL'\n"
            "LOC+22+GYD'\n"
            "LOC+178+GYD'\n"
            "LOC+179+NQZ'\n"
            "NAT+2+AUT'\n"
            "RFF+AVF:AT123'\n"
            "RFF+SEA:9C'\n"
            "DOC+P:110:111+09456160'\n"
            "DTM+36:240710'\n"
            "LOC+91+AUT'\n"
            "NAD+FL+++ESWERFA:EDWTVJD'\n"
            "ATT+2++M'\n"
            "DTM+329:701005'\n"
            "MEA+CT++:0'\n"
            "FTX+BAG+++NULL'\n"
            "LOC+22+GYD'\n"
            "LOC+178+GYD'\n"
            "LOC+179+NQZ'\n"
            "NAT+2+AUT'\n"
            "RFF+AVF:AT122'\n"
            "RFF+SEA:9D'\n"
            "DOC+P:110:111+08031079'\n"
            "DTM+36:220503'\n"
            "LOC+91+AUT'\n"
            "NAD+FL+++UREKS:ADERRFMJRU'\n"
            "ATT+2++M'\n"
            "DTM+329:750513'\n"
            "MEA+CT++:0'\n"
            "FTX+BAG+++NULL'\n"
            "LOC+22+GYD'\n"
            "LOC+178+GYD'\n"
            "LOC+179+NQZ'\n"
            "NAT+2+AUT'\n"
            "RFF+AVF:NJ0SC'\n"
            "RFF+SEA:9F'\n"
            "DOC+P:110:111+07796143'\n"
            "DTM+36:220105'\n"
            "LOC+91+AUT'\n"
            "CNT+42:14'\n"
            "UNT+67+PAX001'\n"
            "UNE+1+1'\n"
            "UNZ+1+2107091419'\n")

        cleaned_header = paxlst.clean(bad_header)
        self.assertEqual.__self__.maxDiff = None
        self.assertEqual(good_header, cleaned_header)


if __name__ == '__main__':
    unittest.main()
